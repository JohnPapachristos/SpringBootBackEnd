package com.example.ProjectSpring;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController // This means that this class is a Controller
@RequestMapping("/Project")
@ResponseBody
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  
//----------------------Create values in my table with a different way----------------------------------
//Writing my url with /createNew in the end we can create values in our table users
//Ousiastika mpainoyn oi times sto usersRequests kai apo ekei me tis methodous poy exw ftiaxei pairnw ta dedomena kai ta bazw sthn class entity dld en telei sth bash  
  
  @PostMapping("/create")
  public Object createUser (@RequestBody UserRequest data) throws Exception {
	  User user = new User();
	  PasswordHash pass = new PasswordHash();
	  try {
		  user.setUsername(data.getUsername());
		  user.setAge(data.getAge());
		  user.setEmail(data.getEmail());
		  user.setGender(data.getGender());
		  DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
		  LocalDateTime now = LocalDateTime.now();
		  pass.setPasswordToHash(data.getPassword());
		  user.setPassword(pass.getGeneratedPassword());
		  user.setDate(dtf.format(now));
		  return userRepository.save(user);
	  }
	  catch(DataIntegrityViolationException ex) {
		  final String message1 = "Not null values OR Username exists OR Email exists";
		  final String message2 = " "+ex.getMostSpecificCause();
		  data.setError(message1);
		  data.setSpeError(message2);
		  return  data;
	  }
	  
	 
  }

  
//----------------------Create values in my table with a different way----------------------------------
//Writing my url with /createNew in the end we can update values in our table users
// Me ton idio tropo pairnw ta dedomena apo to usersRequests dld me tis methodous kai afou prwta kanw elegxoys oti uparxoyn ta dedomena auta poy stelnw sth bash kanw ta katallhla updates  
// Oi elegxoi poy kanw einai ths dikias moy epiloghs gia to id kai ta name kai email an uparxoyn, an den uparxoyn ennoeitai yparxei mhnyma gia enhmerwsh(json)  

  @PutMapping("/update")
  public Object updateUser (@RequestBody UserRequest data) {
	 User user = userRepository.findById(data.getId()).orElse(null); // na dw an tha mporesw na kanw throw exception kai na to diaxeiritsw
	 try {
		 if(user != null) {
			  user.setUsername(data.getUsername());
			  user.setAge(data.getAge());
			  user.setEmail(data.getEmail());
			  user.setGender(data.getGender());
			  DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
			  LocalDateTime now = LocalDateTime.now();  
			  user.setDate(dtf.format(now));
			  return userRepository.save(user);
		 }
		 else {
			 return user;
		 }
	 }
	 catch(DataIntegrityViolationException ex) {
		 
		 final String message1 = "Not null values OR Username exists OR Email exists";
		 final String message2 = " "+ex.getMostSpecificCause();
		 data.setError(message1);
		 data.setSpeError(message2);
		 return  data;
	     
	 }
	 
  }
 
//----------------------Delete values in my table----------------------------------
// Writing my url with /delete in the end we can delete values from our table users
// Kanw oti akrivws kanw kai sta parapanw apla edw o elegxos einai an ebale id o xrhsths kai katepektash elexgei an yparxei mesa sth bash gia na kanei to delete, an den yparxei tou gurnaw kai to katallhlo mhnyma me ena json
 
  	
	@DeleteMapping("/delete/{id}")
	public Object deleteUser (@PathVariable int id) {
		 User user = userRepository.findById(id).orElse(null);
		 UserRequest data = new UserRequest();
		 if(user != null) {
			 userRepository.deleteById(id);
			 String message = "Deleted value with the id: "+id;
			 data.setMessage(message);
			 return data;
		 }
		 else {
			 String message = "Error this id: "+id+" "+"has no matches";
			 data.setError(message);
			 return data;
		 }
	}
	
//----------------------Get values in my table----------------------------------
//Writing my url with /get in the end we can print values in our website or postman (localhost and port 8080)
	@GetMapping("/get")
	public List<User> findUsers (@RequestBody UserRequest data) {
		
		if(data.getUsername() != null) {
			return userRepository.findByUsername(data.getUsername());
		}
		else if(data.getEmail() != null) {
			return userRepository.findByEmail(data.getEmail());
		}
		else if( (data.getEmail() != null) && (data.getUsername() != null) ) {
			return userRepository.findByUsernameAndEmail(data.getUsername(), data.getEmail());
		}
		else {
			return userRepository.findAll();     
		}
	}

	@GetMapping("/getOne/{id}") 
	public Object findUser (@PathVariable Integer id) {
		User user = userRepository.findById(id).orElse(null);
		UserRequest data = new UserRequest();
		if(user != null) {
			return user;
		}
		else {
			String message = "This id: "+id+" has no matches";
			data.setMessage(message);
			return data;
		}
		
	}

}
